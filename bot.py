import os
import json
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

from sheets_connector import (
    write_meal,
    write_hydration,
    write_vitamins,
    write_workout
)
from kcal_parser import parse_kcal

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_CREDS_JSON = json.loads(os.getenv("GOOGLE_CREDS_JSON"))

# –í—ã–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã
def extract_date_and_text(message: str):
    message = message.strip()
    if len(message) >= 11 and message[2] == "." and message[5] == "." and message[10] == ":":
        try:
            date = datetime.strptime(message[:10], "%d.%m.%Y").strftime("%Y-%m-%d")
            return date, message[11:].strip()
        except:
            pass
    return datetime.now().strftime("%Y-%m-%d"), message

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Helpik ‚Äî —Ç–≤–æ–π —Ç—Ä–µ–∫–µ—Ä –ø–∏—Ç–∞–Ω–∏—è, –≤–æ–¥—ã, –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        "üìå –Ø –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "üçΩ `–∑–∞–≤—Ç—Ä–∞–∫: –æ–≤—Å—è–Ω–∫–∞ 200–≥, –º—ë–¥ 20–≥`\n"
        "üíß `–≤–æ–¥–∞: –≤–æ–¥–∞ 1300 –º–ª, –∫–æ—Ñ–µ 600 –º–ª`\n"
        "üíä `–≤–∏—Ç–∞–º–∏–Ω—ã: –æ–º–µ–≥–∞-3, –ö2`\n"
        "üèÉ‚Äç‚ôÄÔ∏è `–Ω–∞–≥—Ä—É–∑–∫–∞: –±–µ–≥ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π 30 –º–∏–Ω, –π–æ–≥–∞ 60 –º–∏–Ω`\n\n"
        "üìÜ –ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é:\n"
        "`08.05.2025: —É–∂–∏–Ω: –≥—Ä–µ—á–∫–∞, —è–π—Ü–∞ 2—à—Ç`"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    date, message = extract_date_and_text(text)

    if message.startswith(("–∑–∞–≤—Ç—Ä–∞–∫:", "–æ–±–µ–¥:", "—É–∂–∏–Ω:", "–ø–æ–ª–¥–Ω–∏–∫:", "–ø–µ—Ä–µ–∫—É—Å:")):
        meal_type, description = message.split(":", 1)
        kcal_data = parse_kcal(description)
        write_meal(GOOGLE_CREDS_JSON, SPREADSHEET_ID, date, meal_type.strip(), description.strip(), kcal_data)
        await update.message.reply_text("üçΩ –ü–∏—Ç–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!")

    elif message.startswith("–≤–æ–¥–∞:"):
        water_ml = 0
        caffeine_ml = 0
        if "–≤–æ–¥–∞" in message:
            try:
                water_ml = int(message.split("–≤–æ–¥–∞")[1].split("–º–ª")[0].strip())
            except: pass
        if "–∫–æ—Ñ–µ" in message:
            try:
                caffeine_ml = int(message.split("–∫–æ—Ñ–µ")[1].split("–º–ª")[0].strip())
            except: pass
        write_hydration(GOOGLE_CREDS_JSON, SPREADSHEET_ID, date, water_ml, caffeine_ml)
        await update.message.reply_text("üíß –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞!")

    elif message.startswith("–≤–∏—Ç–∞–º–∏–Ω—ã:"):
        description = message.replace("–≤–∏—Ç–∞–º–∏–Ω—ã:", "").strip()
        write_vitamins(GOOGLE_CREDS_JSON, SPREADSHEET_ID, date, description)
        await update.message.reply_text("üíä –í–∏—Ç–∞–º–∏–Ω—ã –∑–∞–ø–∏—Å–∞–Ω—ã!")

    elif message.startswith("–Ω–∞–≥—Ä—É–∑–∫–∞:"):
        text_body = message.replace("–Ω–∞–≥—Ä—É–∑–∫–∞:", "").strip()
        parts = text_body.split(",")
        workout_data = {}
        for part in parts:
            for activity in ["—Ä–∞–∑–º–∏–Ω–∫–∞", "–±–µ–≥ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π", "–±–µ–≥ –ª—ë–≥–∫–∏–π", "—Å–∏–ª–æ–≤–∞—è", "–π–æ–≥–∞", "–≤–µ–ª–æ—Å–∏–ø–µ–¥", "–ø–ª–∞–≤–∞–Ω–∏–µ", "—Ö–∞–π–∫–∏–Ω–≥", "—Ö–æ–¥—å–±–∞"]:
                if activity in part:
                    try:
                        minutes = int(part.split(activity)[1].split("–º–∏–Ω")[0].strip())
                        workout_data[activity] = minutes
                    except:
                        workout_data[activity] = 0
        write_workout(GOOGLE_CREDS_JSON, SPREADSHEET_ID, date, workout_data)
        await update.message.reply_text("üèÉ‚Äç‚ôÄÔ∏è –ù–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!")

    else:
        await update.message.reply_text("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π: '–∑–∞–≤—Ç—Ä–∞–∫: ...', '–≤–æ–¥–∞: ...', '–≤–∏—Ç–∞–º–∏–Ω—ã: ...', '–Ω–∞–≥—Ä—É–∑–∫–∞: ...'")

# –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook
if __name__ == "__main__":
    port = int(os.environ.get('PORT', 8080))

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        webhook_url=os.getenv("WEBHOOK_URL")  # ‚Üí https://helpik-production.up.railway.app
    )
